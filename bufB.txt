//BLACK HOLE RENDER

vec4 calcColor(in sViewport vp, in sRay ray)
{
    //get inverse of the resolution
    vec2 invRes = 1.0 / iChannelResolution[0].xy;
    
    sSphere blackHole; //This is the visible part of the black hole
    initSphere(blackHole, vec3(0.0, 0.0, 0.0), 0.1); //at (0, 0, 1) radius of 1
    
    vec3 dp;
    dp.xy = ray.direction.xy - blackHole.center.xy; //used for drawing spheres
    
    if(lengthSq(dp.xy) <= sq(blackHole.radius)){ //renders the center
        return vec4(0.0);
    }
    
    //Black hole code from https://godotengine.org/qa/13023/shaders-how-does-one-create-blackhole-effect-using-shaders
    //Edited and optimized for shadertoy
    
    if(lengthSq(dp.xy) <= 0.5) { //will only render the gravity effect within 0.5 from the center of the screen
        
    	vec2 uv = vec2(0.5, 0.5) - vp.uv; //vec2 changes black hole location
        
    	uv = vp.uv + normalize(uv) * (lengthSq(uv) + 0.1); //This creates the effect
    
    	uv *= 5.0; //this makes the effect bigger
    
    	uv.x *= 0.50; //Changes the speed
        
    	return texture(iChannel0, uv);
    }
    
    return texture(iChannel0, vp.uv);
}


//Output
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) inputs
    const vec3 eyePosition = vec3(0.0);
    const float viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
