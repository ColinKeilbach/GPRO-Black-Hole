//COMMON TAB
//UTILITY FUNCTIONS AND SHAPES

//------------------------------------------------------------------------------
//UTILITY FUNCTIONS

// Functions for squaring a variable
//float
float sq(float x) {
    return x * x;
}
//vec2
vec2 sq(vec2 x) {
    return x * x;
}
//vec3
vec3 sq(vec3 x) {
    return x * x;
}
//vec4
vec4 sq(vec4 x) {
    return x * x;
}

// Functions for getting the length squared
//vec2
float lengthSq(vec2 x) {
    return dot(x, x);
}
//vec3
float lengthSq(vec3 x) {
    return dot(x, x);
    
}
//vec4
float lengthSq(vec4 x) {
    return dot(x, x);
}

// Functions for rotation
//Rotate around the x axis6
mat3 rotationX(float degree) {
    mat3 rotation = mat3(
         1.0, 0.0        , 1.0         ,
         0.0, cos(degree), -sin(degree),
         0.0, sin(degree), cos(degree));
    
    return rotation;
}
//Rotate around the y axis
mat3 rotationY(float degree) {
    mat3 rotation = mat3(
         cos(degree) , 0.0 , sin(degree) ,
         0.0         , 1.0 , 0.0         ,
         -sin(degree), 0.0 , cos(degree));
    
    return rotation;
}
//Rotate around the z axis
mat3 rotationZ(float degree) {
    mat3 rotation = mat3(
         cos(degree), -sin(degree), 0.0,
         sin(degree), cos(degree) , 0.0,
         0.0        , 0.0         , 1.0;
    
    return rotation;
}

//------------------------------------------------------------------------------
//SHAPES	

// Plane
struct sPlane {
    vec3 point;    //This is a point on the plane
    vec3 normal; //This is a vector that is perpendicular to the plane
};

//Plane constructor
void initPlane(sPlane plane, vec3 point, vec3 normal) {
    plane.point = point;
    plane.normal = normal;
}

//This returns a point on the plane based off of a vector
vec3 calcPlanePoint(sPlane plane, vec3 vector, vec3 vectorOrigin) {
    //How it works
	//
	// Let's start with our plane:
	// point  = (1, 1, 1)
	// normal = <1, 2, 3>
	//
	// To get our equation for our plane:
	// normal.x(x + point.x) + normal.y(y + point.y) + normal.z(z + point.z) = 0
	// this means the plane is
	// 1(x + 1) + 2(y + 1) + 3(z + 1) = 0
	//
	// Now we want to get the intersection between a new line:
	// lineOrigin = (0, 0, 0)
	// lineVector = <1, 1, 1>
	// 
	// To get our line equations:
	// x = lineOrigin.x + lineVector.x * t
	// y = lineOrigin.y + lineVector.y * t
	// z = lineOrigin.z + lineVector.z * t
	// so our line is
	// x = 0 + 1 * t
	// y = 0 + 1 * t
	// z = 0 + 1 * t
	//
	// To get the intesection between the line and plane you substitute the 
	// equations for the line for the x, y, and z in the plane equation:
	// 1(1t + 1) + 2(1t + 1) + 3(1t + 1) = 0
	// NOTE: the 0s in the line equations are removed because they do not
	// effect the answer
	//
	// Now we solve for t
	// 
	// Distribute the multiplication
	// 1t + 1 + 2t + 2 + 3t + 3 = 0
	//
	// Add like terms
	// 6t + 6 = 0
	//
	// Solve as a 2 step equation
	// 6t + 6 = 0
	//     -6  -6
	// 6t     =-6
	// 6t/6   = -6/6
	// t = -1
	// 
	// t can then be inserted into the line to see the point of intersection
	// t is negative so this point would be "behind" the vector
	//
	// To make this simpler the equation will be turned into shorter
	// equations that the computer can solve

    float tX = float(plane.normal.x * (vectorOrigin.x + plane.point.x)); //This calculates all of the xs
    // This is the same as
    // normal.x((lineOrigin.x + lineVector.x * t) + point.x
    // but lineVector.x * t has been moved
    
    float tY = float(plane.normal.y * (vectorOrigin.y + plane.point.y)); //This calculates all of the ys
    // This is the same as
    // normal.z((lineOrigin.z + lineVector.z * t) + point.z
    // but lineVector.z * t has been moved
    
    float tZ = float(plane.normal.z * (vectorOrigin.z + plane.point.z)); //This calculates all of the zs
    // This is the same as
    // normal.z((lineOrigin.z + lineVector.z * t) + point.z
    // but lineVector.z * t has been moved
    
    float left = tX + tY + tZ; //this is the left side of the equation
    
    //This is the number that t would be multiplied by on the right side
    float right = (plane.normal.x * vector.x) + (plane.normal.z * vector.z) + (plane.normal.z * vector.z);
    // Each vector variable needs to be multiplied by the normal because that is what would have
    // happended in the other equation
    
    // left = t * right
    float t = left / right;
    
    //Get point
    vec3 returnPoint;
    
    
    //get x
    returnPoint.x = vectorOrigin.x + vector.x * t;
    //get y
    returnPoint.y = vectorOrigin.y + vector.y * t;
    //get z
    returnPoint.z = vectorOrigin.z + vector.z * t;
    
    return returnPoint;
}


//Sphere
struct sSphere {
    float radius;
    vec3 center;
};

//Sphere Constructor
void initSphere(out sSphere sphere, in vec3 center, in float radius) {
    sphere.center = center;
    sphere.radius = radius;
}

//No need for a sphereCalc


//Light
struct pointLight {
    vec4 center;
    vec4 color;
    float intensity;
};
    
//Light Constructor
void initLight(out pointLight light, in vec4 center, in vec4 color, in float intensity) {
    light.center = center;
    light.color = color;
    light.intensity = intensity;
}

//Calculates light values
void lightCalc(out float lightingIntensity, out float specularIntensity, in sSphere sphere, in pointLight light, in vec3 normal, in vec3 position, in vec3 viewport) {
    //This gets the vector direction from the light to the point on the sphere surface
    vec3 direction = vec3(position.x - light.center.x, position.y - light.center.y, position.z - light.center.z);
	
    //Calculate specular light
    vec3 halfwayVector = normalize(direction - viewport); //lightVector - viewVector
    
    float specularCoefficient = dot(normal, halfwayVector); //average of the surface normal and halfwayVector
    
    //Return specular light
    specularIntensity = sq(sq(sq(sq(sq(specularCoefficient))))); //sq * 5 so that specular light is more focused
    
    
    //Calculate diffuse light
    float dist = sqrt(sq(direction.x) + sq(direction.y) + sq(direction.z)); //distance from surface to light
    
    vec3 lightNormal = normalize(light.center.xyz - position); //center of the light - surface
    
    float diffuseCoefficient = max(0.0, dot(normal, lightNormal)); //max so it cannot be negative
    
    float attenuatedIntensity = 1.0 / (1.0 + dist / light.intensity + sq(dist) / sq(light.intensity)); //This makes the light less intense
    
    //Return diffuse light
    lightingIntensity = diffuseCoefficient * attenuatedIntensity;
}

//------------------------------------------------------------------------------
//VEIWPORT

struct sViewport {
    vec4 viewportPoint; //location on the viewing plane
    vec2 pixelCoord;    //pixel position
    vec2 resolution;    //viewport resolution
    vec2 resolutionInv; //inverse of the resolution
    vec2 size;          //in-scene dimentions of the viewport
    vec2 ndc;           //normalized device coordinate
    vec2 uv;            //screen space coord
    float aspectRatio;  //aspect ratio
    float focalLength;  //distance to viewing plane
};

//Viewport Constructor
void initViewport(out sViewport vp,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = vec2(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = vec4(vp.ndc * vp.size * 0.5, -vp.focalLength, 1.0);
}

//------------------------------------------------------------------------------
//RAY

struct sRay {
    vec4 origin;
    vec4 direction;
};
    
//Ray Constructor
void initRayPersp(out sRay ray,
             	  in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = vec4(eyePosition, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = vec4(viewport - eyePosition, 0.0);
}